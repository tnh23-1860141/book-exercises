lyric <- "I like to eat apples and bananas"
lyric <- substr(lyric, 1, 13)
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric, 1, 13)
fruits <- substr(lyric, 15)
nchar(lyric)
fruits <- substr(lyric, 15, 32)
fruits_e <- gsub("a", "ee", fruits)
fruits_o <- gsub("a", "o", fruits)
lyric_e <- c(intro, fruits_e)
print(lyric_e)
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(lyric, fruits_o)
print(lyric_e)
print(paste(intro, lyric_o))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(intro, fruits_o)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
print(paste(intro, fruits_o))
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- funtion(number){
three_greater <- paste(number + 3)
return(three_greater)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- funtion(number){
three_greater <- paste(number + 3)
return(three_greater)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- funtion(number){
three_greater <- (number + 3)
return(three_greater)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- funtion(number) {
three_greater <- (number + 3)
return(three_greater)
}
add_three <- funtion(number) {
three_greater <- (number + 3)
return(three_greater)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- funtion(number) {
return(number + 3)
}
# Define a function `add_three` that takes a single argument and
# returns a value 3 greater than the input
add_three <- funtion(number) {
return(number + 3)
}
add_three <- funtion(number) {
return(number + 3)
}
add_three <- funtion(number) {
return(number + 3)
}
add_three <- funtion(number) {
return(number + 3)
}
add_three <- funtion(number) {
return(number + 3)
}
print("hello")
add_three <- funtion(number) {
return(number + 3)
}
add_three <- function(number) {
return(number + 3)
}
ten <- add_three(7)
print(ten)
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
return(feet + inches)
}
dogs <- c("addy", "ren", "survivor")
print(dogs)
random <- runif(100)
print(random)
# Create a vector `names` that contains your name and the names of 2 people
# next to you. Print the vector.
names <- c("tim", "sarah", "oswaldo")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
names <- c("tim", "sarah", "oswaldo")
# Use the colon operator : to create a vector `n` of numbers from 10:49
n <- c(10:49)
# Use the `length()` function to get the number of elements in `n`
length(n)
print(names)
# Add 1 to each element in `n` and print the result
(n+1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(10:1)
# Create a vector `m` that contains the numbers 10 to 1 (in that order).
# Hint: use the `seq()` function
m <- c(seq(10:1))
print(m)
print(m)
m <- c(seq(10, 1))
print(m)
# Subtract `m` FROM `n`. Note the recycling!
(m - n)
# Subtract `m` FROM `n`. Note the recycling!
(n - m)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave +sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Use the `seq()` function to produce a range of numbers from -5 to 10 in `0.1`
# increments. Store it in a variable `x_range`
x_range <- seq(-5, 10, 0.1)
# Create a vector `sin_wave` by calling the `sin()` function on each element
# in `x_range`.
sin_wave <- sin(x_range)
# Create a vector `cos_wave` by calling the `cos()` function on each element
# in `x_range`.
cos_wave <- cos(x_range)
# Create a vector `wave` by multiplying `sin_wave` and `cos_wave` together, then
# adding `sin_wave` to the product
wave <- sin_wave * cos_wave +sin_wave
# Use the `plot()` function to plot your `wave`!
plot(wave)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `first_ten` that has the values 10 through 20 in it (using
# the : operator)
first_ten <- c(10:20)
# Create a vector `next_ten` that has the values 21 through 30 in it (using the
# seq() function)
next_ten <- seq(21, 30)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- [first_ten + next_ten]
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten + next_ten)
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- [c(first_ten, next_ten)]
# Create a vector `all_numbers` by combining the previous two vectors
all_numbers <- c(first_ten, next_ten)
# Create a variable `eleventh` that contains the 11th element in `all_numbers`
eleventh <- all_numbers[11]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- [c(2:5)]
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- c(2:5)
# Create a vector `some_numbers` that contains the 2nd through the 5th elements
# of `all_numbers`
some_numbers <- all_numbers[2:5]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- even(1:100)
?even
# Create a vector `even` that holds the even numbers from 1 to 100
even <- even[c(1:100)]
# Create a vector `even` that holds the even numbers from 1 to 100
even <- c(1:100)
# Create a vector `even` that holds the even numbers from 1 to 100
seq(1, 100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
seq(2, 100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
seq(2, 100, 2)
# Create a vector `even` that holds the even numbers from 1 to 100
seq(2, 100, 2)
